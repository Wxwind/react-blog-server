package logic

import (
	"context"
	"github.com/golang-jwt/jwt/v4"
	"github.com/pkg/errors"
	"react-blog-server/common/errorx"
	"strings"
	"time"

	"react-blog-server/apps/article/internal/svc"
	"react-blog-server/apps/article/internal/types"

	"github.com/zeromicro/go-zero/core/logx"
)

type LoginLogic struct {
	logx.Logger
	ctx    context.Context
	svcCtx *svc.ServiceContext
}

func NewLoginLogic(ctx context.Context, svcCtx *svc.ServiceContext) *LoginLogic {
	return &LoginLogic{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

func (l *LoginLogic) Login(req *types.LoginReq) (resp *types.LoginResp, err error) {
	if len(strings.TrimSpace(req.Username)) == 0 || len(strings.TrimSpace(req.Password)) == 0 {
		return nil, errors.New("参数错误")
	}

	user, err := l.svcCtx.UserModel.FindOneByUsername(l.ctx, req.Username)
	if err != nil {
		return nil, errorx.NewCodeError(errorx.DATABASE_MYSQL_INTERNAL_ERROR, err.Error())
	}
	if user == nil {
		return nil, errorx.NewCodeError(errorx.LOGIN_NOT_EXISTS_USERNAME, "用户名不存在")
	}
	if user.Password == req.Password {
		//生成Token
		token, err := l.GenerateToken(l.svcCtx.Config.Auth.AccessSecret, time.Now().Unix(), l.svcCtx.Config.Auth.AccessExpire, user.Id)
		if err != nil {
			return nil, err
		}
		return &types.LoginResp{
			Data: types.LoginRespData{Token: token},
			Meta: types.Meta{Status: 200, Msg: "succeed"},
		}, nil
	} else {
		return nil, errorx.NewCodeError(errorx.LOGIN_WRONG_PASSWORD, "密码错误")
	}
}

/*
GenerateToken returns token generated by jwt

	@param secretKey string jwt密钥
	@param iat int64 签发时间(unix time)
	@param seconds int64 过期时间（单位：秒）
	@param id int64 用户id
*/
func (l *LoginLogic) GenerateToken(secretKey string, iat int64, seconds int64, userId int64) (jwtToken string, err error) {
	claims := make(jwt.MapClaims)
	claims["exp"] = iat + seconds
	claims["iat"] = iat
	claims["userId"] = userId
	token := jwt.New(jwt.SigningMethodHS256)
	token.Claims = claims
	return token.SignedString([]byte(secretKey))
}
